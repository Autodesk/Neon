#pragma once
#include <array>
#include <string>

namespace Neon {

enum struct GraphDependencyType
{
    data = 0 /**< dependency generated by analyzing data dependency */,
    scheduling = 1 /**< hints for scheduling **/,
    user = 2 /**< User defined scheduling */
};

/**
 * Set of utilities for GraphDependencyType options.
 */
struct GraphDependencyTypeUtil
{
    /**
     * Number of configurations for the enum
     */
    static const int nConfig{static_cast<int>(3)};

    /**
     * Convert enum value to string
     *
     * @param dataView
     */
    static auto toString(GraphDependencyType dataView) -> std::string;

    /**
     * Returns all valid configuration for GraphDependencyType
     */
    static auto validOptions() -> std::array<Neon::GraphDependencyType, GraphDependencyTypeUtil::nConfig>;

    /**
     * Convert an integer to a GraphDependencyType
     */
    static auto fromInt(int val) -> GraphDependencyType;

    /**
     * Convert a GraphDependencyType to an integer
     */
    static auto toInt(GraphDependencyType dataView) -> int;
};


/**
 * operator<<
 */
std::ostream& operator<<(std::ostream& os, Neon::GraphDependencyType const& m);
}  // namespace Neon
